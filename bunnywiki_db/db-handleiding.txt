=== Database info ======================================================

Created by: 		M.W. Iwema
Date: 			16-12-2020
Version:		1.1

Server type: 		MySQL
Database: 		Bunnywiki_db
Tables: 		Bestellingen, Biedingen, Gebruikers en Producten


*** Support ************************************************************
Voor vragen of veranderingen stuur mij bericht, aub!
************************************************************************


=== Gebruikerers =======================================================

-Column info
1. Gebruiker_id: Heeft AUTO_INCREMENT dus INSERT/ UPDATE geen value!!
2. Telefoonnummer: Heeft 'DEFAULT "-"' het is dus niet een verplicht veld,
		   dit vanwege privacy redenen.
3. Rol: 1 (Gebruiker), 2 (Verkoper) en 3 (Beheerder)

-Wachtwoord info

De wachtwoorden worden de geencrypt. Hier zijn speciale modules voor zowel
in MySQL als in PHP. Alleen de module die wordt gebruikt moet gelijk zijn
met de android applicatie anders kan hij niet geverifieerd worden. 

Dus voor de encryptie en decryptie van de wachtwoorden zal de module BCRYPT
gebruikt moeten worden. Deze module gaat samen tussen de twee applicaties.

!! Wordt nog verder onderzocht !!

!! UPDATE & INSERT !!

=== Producten ==========================================================

-Column info
1. Product_id: Heeft AUTO_INCREMENT dus INSERT/ UPDATE geen value!!
2. Status: 0 (Gesloten voor verkoop) en 1 (Open voor verkoop)

!! UPDATE & INSERT !!

=== Biedingen ==========================================================

- Table info 
Hier komen producten en gebruikers samen doormiddel van het ID. De tabel
rows worden niet opgeslagen nadat de bieding is gesloten/ afgerond, 
inplaats daarvan wordt de data van het winnende bod aan de tabel 
bestellingen toegevoegd. 

Door deze methode zorg je ervoor dat er 1 bestelling is van de afgeronde 
bieding en de rest van de biedingen die bij de bieding hoorden worden 
verwijderd. Zo wordt dus onnodige data verwijderd.

!! INSERT & DELETE !!

- Query voorbeelden

Voorbeeld 1:

	SELECT *
	FROM biedingen
	INNER JOIN gebruikers ON gebruikers.gebruiker_id = biedingen.gebruiker_id
	INNER JOIN producten ON producten.product_id = biedingen.product_id

	-------------------------------------------------------------
	bieding_id	Product_id	Gebruiker_id	Gebruiker_bod
	"1"		"1"		"2"		"15,9"
	"2"		"1"		"5"		"15,5"
	"3"		"2"		"2"		"20"
	"4"		"2"		"6"		"20,5"
	-------------------------------------------------------------

Voorbeeld 2:

	INSERT INTO biedingen (bieding_id, product_id, gebruiker_id, gebruiker_bod)
	VALUES (NULL, [product_id], [gebruiker_id], [bod]) -- [*] zijn variablen uit de applicatie 

Voorbeeld 3:
	
	DELETE FROM Biedingen WHERE Biedingen.product_id = [id] -- [*] is variabel in de applicatie


=== Bestellingen =======================================================

- Table info
De laatste processen gebeuren in deze tabel. Vanaf hier kan je alle data
van de afgeronde bestelling ophalen bijvoorbeeld uit: de Gebruiker en 
Product tabel.

- Column info 
1. besteldatum: bestaat uit een DATETIME datatype met een DEFAULT waarde CURRENT_TIMESTAMP. 

   	        Dit houdt in wanneer je data uit de biedingen tabel toevoegd in de 
                bestellingen tabel de datum en tijd automatisch wordt toegevoegd
                aan de column besteldatum

- Query voorbeelden

Voorbeeld 1:

	SELECT bestellingen.bestelling_id, bestellingen.product_id, producten.naam, bestellingen.gebruiker_id,
	gebruikers.voornaam, bestellingen.gebruiker_bod, bestellingen.besteldatum
	FROM bestellingen
	INNER JOIN gebruikers ON gebruikers.gebruiker_id = bestellingen.gebruiker_id
	INNER JOIN producten ON producten.product_id = bestellingen.product_id

	---------------------------------------------------------------------------------------------------------------------
	bestelling_id	product_id	naam		gebruiker_id	voornaam	gebruiker_bod	besteldatum
	"1"		"2"		"Konijnen bal"	"2"		"Roy"		"20,5"		"2020-12-16 18:07:52"
	---------------------------------------------------------------------------------------------------------------------

Voorbeeld 2:

	!! Query voor een bestelling item aanmaken vanuit biedingen !!

	INSERT INTO bestellingen (bestellingen.product_id, bestellingen.gebruiker_id, bestellingen.bod, bestellingen.verzendkosten)
	SELECT biedingen.product_id, biedingen.gebruiker_id, max(biedingen.gebruiker_bod) AS gebruiker_bod, (14.7) AS verzendkosten
	FROM biedingen
	WHERE biedingen.product_id = [id] -- [*] moet overeen komen met biedingen.product_id
	







